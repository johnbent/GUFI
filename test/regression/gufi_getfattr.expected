$ gufi_getfattr --help
usage: gufi_getfattr [--help] [--version] [--name NAME] [--dump]
                     [--match PATTERN] [--only-values] [--recursive]
                     [--delim c] [--in-memory-name name]
                     [--aggregate-name name] [--skip-file filename]
                     [--verbose]
                     path [path ...]

GUFI version of getfattr

Note: --no-dereference/-h is always set

positional arguments:
  path

options:
  --help                show this help message and exit
  --version, -v         show program's version number and exit
  --name NAME, -n NAME  Dump the values of the named extended attribute
  --dump, -d            Dump the values of all extended attributes associated
                        with pathname.
  --match PATTERN, -m PATTERN
                        Only include attributes with names matching the
                        regular expression pattern. The default value for
                        pattern is "^user\.", which includes all the
                        attributes in the user namespace. Specify "-" for
                        including all attributes". Refer to attr(5) for a more
                        detailed discussion of namespaces.
  --only-values         Dump out the raw extended attribute value(s) without
                        encoding them.
  --recursive, -R       List the atttributes of all files and directories
                        recursively.
  --delim c             delimiter separating output columns
  --in-memory-name name
                        Name of in-memory database when aggregation is
                        performed
  --aggregate-name name
                        Name of final database when aggregation is performed
  --skip-file filename  Name of file containing directory basenames to skip
  --verbose, -V         Show the gufi_query being executed

# prefix
$ gufi_getfattr .

# prefix with --verbose
$ gufi_getfattr --verbose .
GUFI query is
   gufi_query
    -n 1
    -B 4096
    -d
    -x
    -a
    -S SELECT rpath(sname, sroll), xattr_name FROM vrxsummary WHERE ((name REGEXP '^.$')) AND (isroot == 1) AND (xattr_name REGEXP '^user\.')
    .

# 0 xattrs
$ gufi_getfattr prefix

# 1 xattr
$ gufi_getfattr 1MB
1MB user.size

# 2 xattrs
$ gufi_getfattr directory/subdirectory
subdirectory user.name
subdirectory user.type

# 2 xattrs
$ gufi_getfattr leaf_directory
leaf_directory user.name
leaf_directory user.type

# 3 xattrs
$ gufi_getfattr leaf_directory/leaf_file1
leaf_directory/leaf_file1 user.name1
leaf_directory/leaf_file1 user.name2
leaf_directory/leaf_file1 user.name3

# 3 xattrs
$ gufi_getfattr leaf_directory/leaf_file2
leaf_directory/leaf_file2 user.name4
leaf_directory/leaf_file2 user.name5
leaf_directory/leaf_file2 user.name6

# 0 xattrs
$ gufi_getfattr nonexistant_path

# 1 xattr
$ gufi_getfattr --dump 1MB
1MB user.size 1MB

# 2 xattrs
$ gufi_getfattr --dump directory/subdirectory
subdirectory user.name sub
subdirectory user.type dir

# 2 xattrs
$ gufi_getfattr --dump leaf_directory
leaf_directory user.name leaf
leaf_directory user.type dir

# 3 xattrs
$ gufi_getfattr --dump leaf_directory/leaf_file1
leaf_directory/leaf_file1 user.name1 value1
leaf_directory/leaf_file1 user.name2 value2
leaf_directory/leaf_file1 user.name3 value3

# 3 xattrs
$ gufi_getfattr --dump leaf_directory/leaf_file2
leaf_directory/leaf_file2 user.name4 value4
leaf_directory/leaf_file2 user.name5 value5
leaf_directory/leaf_file2 user.name6 value6

# No matching name
$ gufi_getfattr --name user.name 1MB

# 1 xattr
$ gufi_getfattr --name user.size 1MB
1MB user.size

# 1 xattr
$ gufi_getfattr --name user.type directory/subdirectory
subdirectory user.type

# 1 xattr
$ gufi_getfattr --name user.name leaf_directory
leaf_directory user.name

# 1 xattr
$ gufi_getfattr --name user.name1 leaf_directory/leaf_file1
leaf_directory/leaf_file1 user.name1

# 1 xattr
$ gufi_getfattr --name user.name4 leaf_directory/leaf_file2
leaf_directory/leaf_file2 user.name4

# No matching name
$ gufi_getfattr --match system.* 1MB

# 1 xattr
$ gufi_getfattr --match user.* 1MB
1MB user.size

# 2 xattrs
$ gufi_getfattr --match .*name directory/subdirectory
subdirectory user.name

# 2 xattrs
$ gufi_getfattr --match .*type leaf_directory
leaf_directory user.type

# 3 xattrs
$ gufi_getfattr --match .*name.* leaf_directory/leaf_file1
leaf_directory/leaf_file1 user.name1
leaf_directory/leaf_file1 user.name2
leaf_directory/leaf_file1 user.name3

# 3 xattrs
$ gufi_getfattr --match user\..* leaf_directory/leaf_file2
leaf_directory/leaf_file2 user.name4
leaf_directory/leaf_file2 user.name5
leaf_directory/leaf_file2 user.name6

# 1 xattr
$ gufi_getfattr --only-values 1MB
1MB

# 2 xattrs
$ gufi_getfattr --only-values directory/subdirectory
dir
sub

# 2 xattrs
$ gufi_getfattr --only-values leaf_directory
dir
leaf

# 3 xattrs
$ gufi_getfattr --only-values leaf_directory/leaf_file1
value1
value2
value3

# 3 xattrs
$ gufi_getfattr --only-values leaf_directory/leaf_file2
value4
value5
value6

# 11 xattrs
$ gufi_getfattr --recursive .
./1MB user.size
./directory/subdirectory user.name
./directory/subdirectory user.type
./leaf_directory user.name
./leaf_directory user.type
./leaf_directory/leaf_file1 user.name1
./leaf_directory/leaf_file1 user.name2
./leaf_directory/leaf_file1 user.name3
./leaf_directory/leaf_file2 user.name4
./leaf_directory/leaf_file2 user.name5
./leaf_directory/leaf_file2 user.name6

# 1 xattr - ignore --recursive because path is a file
$ gufi_getfattr --recursive 1MB
1MB user.size

# 2 xattrs
$ gufi_getfattr --recursive directory
directory/subdirectory user.name
directory/subdirectory user.type

# 2 xattrs
$ gufi_getfattr --recursive directory/subdirectory
subdirectory user.name
subdirectory user.type

# 8 xattrs
$ gufi_getfattr --recursive leaf_directory
leaf_directory user.name
leaf_directory user.type
leaf_directory/leaf_file1 user.name1
leaf_directory/leaf_file1 user.name2
leaf_directory/leaf_file1 user.name3
leaf_directory/leaf_file2 user.name4
leaf_directory/leaf_file2 user.name5
leaf_directory/leaf_file2 user.name6

# --name takes precedence over --match (bad name)
$ gufi_getfattr --name user.name --match user.* 1MB

# --name takes precedence over --match (bad match)
$ gufi_getfattr --name user.size --match .*name.* 1MB
1MB user.size

# --only-values overwrites --dump
$ gufi_getfattr --only-values --dump 1MB
1MB

# --only-values overwrites --dump, and is affected by bad name
$ gufi_getfattr --only-values --dump --name user.name 1MB

# --only-values overwrites --dump, and is affected by good name
$ gufi_getfattr --only-values --dump --name user.size 1MB
1MB

# --only-values overwrites --dump, and is affected by bad match pattern
$ gufi_getfattr --only-values --dump --match .*name.* 1MB

# --only-values overwrites --dump, and is affected by good match pattern
$ gufi_getfattr --only-values --dump --match .*size.* 1MB
1MB

# --only-values overwrites --dump, and is affected by --name and --match (bad name)
$ gufi_getfattr --only-values --dump --name user.name --match .*user.* 1MB

# --only-values overwrites --dump, and is affected by --name and --match (bad match)
$ gufi_getfattr --only-values --dump --name user.size --match .*name.* 1MB
1MB

